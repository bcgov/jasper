name: Deploy Lambda
description: Deploy image to a Lambda function to AWS

inputs:
  environment:
    description: The environment to which the image will be deployed.
    required: true
  aws_account:
    description: The AWS Account ID.
    required: true
  region:
    description: The AWS Region of the AWS Account.
    required: true
  app_name:
    description: The application name.
    required: true
  resource:
    description: The resource path of the lambda function.
    required: true
  lambda_name:
    description: The lambda function name name.
    required: true
  aws_role_arn:
    description: The AWS Role ARN to assume.
    required: true
  ghcr_token:
    description: The token to use to login to the GHCR.
    required: true
  github_image_repo:
    description: The GCHR repo where images are stored.
    required: true
  image_name:
    description: The name of the image to be deployed.
    required: true
  short_sha:
    description: The short SHA used to tag image in GCHR.
    required: true

runs:
  using: composite

  steps:
    - name: Set reusable variables
      id: vars
      shell: bash
      run: |
        echo "full_ecr_repo_url=${{ inputs.aws_account }}.dkr.ecr.${{ inputs.region }}.amazonaws.com/${{ inputs.app_name }}-lambda-repo-${{ inputs.environment }}" >> $GITHUB_OUTPUT
        echo "container_name=${{ inputs.app_name }}-${{ inputs.tier_name }}-container-${{ inputs.environment }}" >> $GITHUB_OUTPUT


    - name: Log in to the GHCR
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ inputs.ghcr_token }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-skip-session-tagging: true
        aws-region: ${{ inputs.region }}
        role-to-assume: ${{ inputs.aws_role_arn }}
        role-duration-seconds: 1800
        role-session-name: ci-deployment

    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v2

    - name: Check ECR Image exists
      id: ecr-check
      shell: bash
      run: |
        IMAGE_TAG=${{ inputs.resource }}${{ inputs.lambda_name }}-${{ inputs.short_sha }}
        REPOSITORY_NAME=${{ inputs.app_name }}-lambda-repo-${{ inputs.environment }}
        
        IMAGE_EXISTS=$(aws ecr describe-images --repository-name $REPOSITORY_NAME --query "imageDetails[?contains(imageTags, '$IMAGE_TAG')]" --output text)

        if [ -z "$IMAGE_EXISTS" ]; then
          echo "Image with tag $IMAGE_TAG does not exist."
          echo "exists=false" >> $GITHUB_OUTPUT
        else
          echo "Image with tag $IMAGE_TAG already exists."
          echo "exists=true" >> $GITHUB_OUTPUT
        fi

    - name: Push if Docker image does not exist
      if: steps.ecr-check.outputs.exists == 'false'
      shell: bash
      run: |
        docker pull ${{ inputs.github_image_repo }}/${{ inputs.image_name }}:${{ inputs.short_sha}}
        docker tag ${{ inputs.github_image_repo }}/${{ inputs.image_name }}:${{ inputs.short_sha}} ${{ steps.vars.outputs.full_ecr_repo_url }}:${{ inputs.image_name }}-${{ inputs.short_sha }}
        docker push ${{ steps.vars.outputs.full_ecr_repo_url }}:${{ inputs.image_name }}-${{ inputs.short_sha }}

    - name: Update Lambda Function
      shell: bash
      run: |
        aws lambda update-function-code \
          --function-name ${{ inputs.app_name }}-${{ inputs.lambda_name }}-lambda-${{ inputs.environment }} \
          --image-uri ${{ env.full_ecr_repo_url }}:${{ inputs.resource }}.${{ inputs.lambda_name }}-${{ inputs.short_sha }}
