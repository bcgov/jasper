name: Deploy to AWS
description: Deploy image to AWS Instance

inputs:
  environment:
    description: The environment to which the image will be deployed.
    required: true
  aws_account:
    description: The AWS Account ID.
    required: true
  region:
    description: The AWS Region of the AWS Account.
    required: true
  app_name:
    description: The application name.
    required: true
  aws_role_arn:
    description: The AWS Role ARN to assume.
    required: true
  ghcr_token:
    description: The token to use to login to the GHCR.
    required: true
  github_image_repo:
    description: The GCHR repo where images are stored.
    required: true
  image_name:
    description: The name of the image to be deployed.
    required: true
  image_digest:
    description: The digest of the image to be deployed. Identifies the unique image tag in the GHCR.
    required: true
  tier_name:
    description: The tier/layer name such as web or api.
    required: true

runs:
  using: composite
  env:
    TASK_DEFINITION_NAME: ${{ inputs.app_name }}-${{ inputs.tier_name }}-task-definition-${{ inputs.environment }}
    CONTAINER_NAME: ${{ inputs.app_name }}-${{ inputs.tier_name }}-container-${{ inputs.environment }}
    ECS_CLUSTER_NAME: ${{ inputs.app_name }}-ecs-cluster-${{ inputs.environment }}
    ECS_SERVICE_NAME: ${{ inputs.app_name }}-ecs-${{ inputs.tier_name }}-service-${{ inputs.environment }}
  steps:
    - name: Log in to the GHCR
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ inputs.ghcr_token }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-skip-session-tagging: true
        aws-region: ${{ inputs.region }}
        role-to-assume: ${{ inputs.aws_role_arn }}
        role-duration-seconds: 1800
        role-session-name: ci-deployment

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Pull Docker image from GHCR
      run: |
        docker pull ${{ inputs.github_image_repo }}${{ inputs.image_name }}@${{ inputs.image_digest }}

    - name: Setup Image Metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ inputs.aws_account }}.dkr.ecr.${{ inputs.region }}.amazonaws.com/${{ inputs.app_name }}-ecr-repo-${{ inputs.environment }}
        tags: |
          type=raw,value=${{ inputs.image_name }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Retag and Push Docker Image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        load: true

    - name: Download task definition
      run: |
        aws ecs describe-task-definition --task-definition ${{ env.TASK_DEFINITION_NAME }} --query taskDefinition > ${{ env.TASK_DEFINITION_NAME }}.json

    - name: Fill in new image ID in task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
        task-definition: ${{ env.TASK_DEFINITION_NAME }}.json 
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ inputs.aws_account }}.dkr.ecr.${{ inputs.region }}.amazonaws.com/${{ inputs.app_name }}-ecr-repo-${{ inputs.environment }}:${{ inputs.image_name }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v2
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE_NAME }}
        cluster: ${{ env.ECS_CLUSTER_NAME }}
        wait-for-service-stability: true