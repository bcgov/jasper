name: Deploy to AWS
description: Deploy image to AWS Instance

inputs:
  environment:
    description: The environment to which the image will be deployed.
    required: true
  aws_account:
    description: The AWS Account ID.
    required: true
  region:
    description: The AWS Region of the AWS Account.
    required: true
  app_name:
    description: The application name.
    required: true
  aws_role_arn:
    description: The AWS Role ARN to assume.
    required: true
  ghcr_token:
    description: The token to use to login to the GHCR.
    required: true
  github_image_repo:
    description: The GCHR repo where images are stored.
    required: true
  image_name:
    description: The name of the image to be deployed.
    required: true
  image_digest:
    description: The digest of the image to be deployed. Identifies the unique image tag in the GHCR.
    required: true
  tier_name:
    description: The tier/layer name such as web or api.
    required: true

runs:
  using: composite

  steps:
    - name: Set reusable variables
      id: vars
      shell: bash
      run: |
        echo "task_definition_name=${{ inputs.app_name }}-${{ inputs.tier_name }}-task-definition-${{ inputs.environment }}" >> $GITHUB_OUTPUT
        echo "container_name=${{ inputs.app_name }}-${{ inputs.tier_name }}-container-${{ inputs.environment }}" >> $GITHUB_OUTPUT
        echo "ecs_cluster_name=${{ inputs.app_name }}-ecs-cluster-${{ inputs.environment }}" >> $GITHUB_OUTPUT
        echo "ecs_service_name=${{ inputs.app_name }}-ecs-${{ inputs.tier_name }}-service-${{ inputs.environment }}" >> $GITHUB_OUTPUT
        echo "full_ecr_repo_url=${{ inputs.aws_account }}.dkr.ecr.${{ inputs.region }}.amazonaws.com/${{ inputs.app_name }}-ecr-repo-${{ inputs.environment }}" >> $GITHUB_OUTPUT

    - name: Log in to the GHCR
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ inputs.ghcr_token }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-skip-session-tagging: true
        aws-region: ${{ inputs.region }}
        role-to-assume: ${{ inputs.aws_role_arn }}
        role-duration-seconds: 1800
        role-session-name: ci-deployment

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Pull Docker image from GHCR
      shell: bash
      run: |
        docker pull ${{ inputs.github_image_repo }}${{ inputs.image_name }}@${{ inputs.image_digest }}
        docker tag ${{ inputs.github_image_repo }}${{ inputs.image_name }}@${{ inputs.image_digest }} ${{ steps.vars.outputs.full_ecr_repo_url }}:${{ inputs.image_name }}
        docker push ${{ steps.vars.outputs.full_ecr_repo_url }}:${{ inputs.image_name }}

    - name: Download task definition
      shell: bash
      run: |
        aws ecs describe-task-definition --task-definition ${{ steps.vars.outputs.task_definition_name }} --query taskDefinition > ${{ steps.vars.outputs.task_definition_name }}.json

    - name: Fill in new image ID in task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ steps.vars.outputs.task_definition_name }}.json
        container-name: ${{ steps.vars.outputs.container_name }}
        image: "${{ steps.vars.outputs.full_ecr_repo_url }}:${{ inputs.image_name }}"

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v2
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ steps.vars.outputs.ecs_service_name }}
        cluster: ${{ steps.vars.outputs.ecs_cluster_name }}
        wait-for-service-stability: true
