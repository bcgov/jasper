name: AWS Bootstrap Workflow

on:
  workflow_call:
    inputs:
      CONTEXT_FOLDER:
        required: true
        type: string
      ENVIRONMENT_NAME:
        required: true
        type: string
      TOOLKIT_STACK_NAME:
        required: true
        type: string
      QUALIFIER:
        required: true
        type: string      

permissions:
  id-token: write
  contents: read

jobs:
  check_changes:
    name: Check Changes
    runs-on: ubuntu-20.04
    outputs:
      infra_changed: ${{ steps.check_changes.outputs.infra_changed }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - name: Check modified folders
        id: check_changes
        env:
          CONTEXT_FOLDER: ${{ inputs.CONTEXT_FOLDER }}
          CHANGE_FOLDER_NAME: ${{ inputs.CHANGE_FOLDER_NAME }}
        run: |            
          echo "=============== list modified files ==============="
          git diff --name-only HEAD^ HEAD
          
          echo "========== check paths of modified files =========="
          git diff --name-only HEAD^ HEAD >> files.txt
          infra_changed=false
          while IFS= read -r file
          do
            echo $file
            if [[ $file == $CHANGE_FOLDER_NAME/* ]]; then
              infra_changed=true
              break
            fi
          done < files.txt
          echo "infra_changed=$infra_changed" >> "$GITHUB_OUTPUT"

  

  synth_deploy_state_components:
    name: Synth and Deploy Terraform State Components
    runs-on: ubuntu-20.04
    environment: ${{ inputs.ENVIRONMENT_NAME }}
    needs: [check_changes, build_push_api_auth_lambda, build_push_cdc_events_lambda, build_push_cdc_auth_lambda]
    # if: needs.check_changes.outputs.infra_changed == 'true'
    steps:
      - uses: actions/checkout@v4
      
      - name: Get AWS Account ID
        run: echo "CDK_DEFAULT_ACCOUNT=${{ vars.AWS_ACCOUNT }}" >> $GITHUB_ENV

      - name: Get AWS Region
        run: echo "CDK_DEFAULT_REGION=${{ vars.AWS_REGION }}" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-skip-session-tagging: true
          aws-region: ${{ vars.AWS_REGION }}
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          role-duration-seconds: 1800
          role-session-name: ci-deployment

      

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.12.2'

      - name: Install NPM Modules
        run: "npm config set engine-strict true && npm ci"
        working-directory: ${{ inputs.CONTEXT_FOLDER }}

      - name: Build
        run: "npm run build"
        working-directory: ${{ inputs.CONTEXT_FOLDER }}

      - name: Install AWS CDK
        run: "npm install -g aws-cdk@2.85.0"

      - name: CDK Bootstrap
        env:
          TOOLKIT_STACK_NAME: ${{ inputs.TOOLKIT_STACK_NAME }}
          QUALIFIER: ${{ inputs.QUALIFIER }}
          BRANCH_NAME: ${{ inputs.BRANCH_NAME }}
          ENV_NAME: ${{ inputs.ENVIRONMENT_NAME }}          
        run: |
          echo "Running CDK Bootstrap"
          npx cdk bootstrap --toolkit-stack-name $TOOLKIT_STACK_NAME --qualifier $QUALIFIER --context branch-name=$BRANCH_NAME
        working-directory: ${{ inputs.CONTEXT_FOLDER }}

      - name: CDK Synth
        env:
          TOOLKIT_STACK_NAME: ${{ inputs.TOOLKIT_STACK_NAME }}
          QUALIFIER: ${{ inputs.QUALIFIER }}
          BRANCH_NAME: ${{ inputs.BRANCH_NAME }}
          ENV_NAME: ${{ inputs.BRANCH_NAME }}          
        run: |
          echo "Running CDK Synth"
          npx cdk synth --toolkit-stack-name $TOOLKIT_STACK_NAME --qualifier $QUALIFIER --context branch-name=$BRANCH_NAME
        working-directory: ${{ inputs.CONTEXT_FOLDER }}

      

      - name: CDK Deploy
        id: cdk_deploy
        env:
          TOOLKIT_STACK_NAME: ${{ inputs.TOOLKIT_STACK_NAME }}
          QUALIFIER: ${{ inputs.QUALIFIER }}
          BRANCH_NAME: ${{ inputs.BRANCH_NAME }}
          ENV_NAME: ${{ inputs.BRANCH_NAME }}          
        run: |
          npx cdk deploy --toolkit-stack-name $TOOLKIT_STACK_NAME --qualifier $QUALIFIER --require-approval never --all
        working-directory: ${{ inputs.CONTEXT_FOLDER }}

      