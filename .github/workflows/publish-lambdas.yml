name: Deploy Lambda Functions

on:
  push:
    branches:
      - master
    paths:
      - "aws/**"

  workflow_dispatch:

env:
  WORKING_DIRECTORY: ./aws
  NODE_VERSION: 22
  GITHUB_IMAGE_REPO: ghcr.io/bcgov/jasper
  
jobs:
  get-lambdas:
    runs-on: ubuntu-latest
    outputs:
      lambda_dir_list: ${{ steps.convert.outputs.LAMBDA_DIR_LIST }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get Lambda directories
        id: lambdas
        shell: bash
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          dirs=$(find lambdas -mindepth 2 -maxdepth 2 -type d | sed 's|lambdas/||' | paste -sd ';' -)  # Space-separated
          echo "LAMBDA_DIRS=$dirs" >> $GITHUB_ENV
      
      - name: Convert FOLDERS to JSON array
        id: convert
        shell: bash
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          LAMBDA_DIR_LIST=$(echo "${LAMBDA_DIRS}" | jq -R 'split(";")' -c)
          echo "LAMBDA_DIR_LIST=$LAMBDA_DIR_LIST" >> $GITHUB_OUTPUT

  deploy2gchr:
    needs: get-lambdas
    environment: dev
    outputs:
      short_sha: ${{ steps.short_sha.outputs.SHORT_SHA }}
    permissions:
      id-token: write
      packages: write
    runs-on: ubuntu-latest

    strategy:
      matrix:
        lambda: ${{ fromJSON(needs.get-lambdas.outputs.lambda_dir_list) }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build Lambdas codebase
        uses: ./.github/workflows/actions/build-lambdas
        with:
          working_directory: ${{ env.WORKING_DIRECTORY }}
          node_version: ${{ env.NODE_VERSION }}

      - name: Log in to the GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get short SHA
        id: short_sha
        run: |
          echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Parse Resource and Lambda Name
        id: parse
        run: |
          echo "Lambda: ${{ matrix.lambda }}"
          RESOURCE="${{ matrix.lambda }}"
          LAMBDA="${{ matrix.lambda }}"
          echo "RESOURCE=${RESOURCE%%/*}" >> $GITHUB_ENV
          echo "LAMBDA=${LAMBDA##*/}" >> $GITHUB_ENV

      - name: Setup Image Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.GITHUB_IMAGE_REPO }}/${{ env.RESOURCE }}.${{ env.LAMBDA }}
          tags: |
            type=raw,value=${{ steps.short_sha.outputs.SHORT_SHA }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker

      - name: Build ${{ matrix.lambda }} image
        uses: docker/build-push-action@v6
        with:
          push: true
          file: ./docker/aws/Dockerfile.release
          context: ./aws
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            TARGET_FUNCTION=${{ matrix.lambda }}
            NODE_VERSION=${{ env.NODE_VERSION }}

  deploy2dev:
    name: Deploy to DEV
    needs: [get-lambdas, deploy2gchr]
    env:
      ENVIRONMENT: dev
    permissions:
      id-token: write
      packages: write
    runs-on: ubuntu-latest
    environment: dev

    strategy:
      matrix:
        lambda: ${{ fromJSON(needs.get-lambdas.outputs.lambda_dir_list) }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Deploy to ${{ env.ENVIRONMENT }}
        uses: ./.github/workflows/actions/deploy-lambda
        with:
          environment: ${{ env.ENVIRONMENT }}
          aws_account: ${{ vars.AWS_ACCOUNT }}
          region: ${{ vars.AWS_REGION }}
          app_name: ${{ vars.APP_NAME }}
          aws_role_arn: ${{ vars.AWS_ROLE_ARN }}
          ghcr_token: ${{ secrets.GITHUB_TOKEN }}
          github_image_repo: ${{ env.GITHUB_IMAGE_REPO }}
          lambda: ${{ matrix.lambda }}
          short_sha: ${{ needs.deploy2gchr.outputs.short_sha }}

  deploy2test:
    name: Deploy to TEST
    needs: [get-lambdas, deploy2gchr, deploy2dev]
    env:
      ENVIRONMENT: test
    permissions:
      id-token: write
      packages: write
    runs-on: ubuntu-latest
    environment: test

    strategy:
      matrix:
        lambda: ${{ fromJSON(needs.get-lambdas.outputs.lambda_dir_list) }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Deploy to ${{ env.ENVIRONMENT }}
        uses: ./.github/workflows/actions/deploy-lambda
        with:
          environment: ${{ env.ENVIRONMENT }}
          aws_account: ${{ vars.AWS_ACCOUNT }}
          region: ${{ vars.AWS_REGION }}
          app_name: ${{ vars.APP_NAME }}
          aws_role_arn: ${{ vars.AWS_ROLE_ARN }}
          ghcr_token: ${{ secrets.GITHUB_TOKEN }}
          github_image_repo: ${{ env.GITHUB_IMAGE_REPO }}
          lambda: ${{ matrix.lambda }}
          short_sha: ${{ needs.deploy2gchr.outputs.short_sha }}

  deploy2prod:
    name: Deploy to PROD
    needs: [get-lambdas, deploy2gchr, deploy2dev, deploy2test]
    env:
      ENVIRONMENT: prod
    permissions:
      id-token: write
      packages: write
    runs-on: ubuntu-latest
    environment: prod

    strategy:
      matrix:
        lambda: ${{ fromJSON(needs.get-lambdas.outputs.lambda_dir_list) }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Deploy to ${{ env.ENVIRONMENT }}
        uses: ./.github/workflows/actions/deploy-lambda
        with:
          environment: ${{ env.ENVIRONMENT }}
          aws_account: ${{ vars.AWS_ACCOUNT }}
          region: ${{ vars.AWS_REGION }}
          app_name: ${{ vars.APP_NAME }}
          aws_role_arn: ${{ vars.AWS_ROLE_ARN }}
          ghcr_token: ${{ secrets.GITHUB_TOKEN }}
          github_image_repo: ${{ env.GITHUB_IMAGE_REPO }}
          lambda: ${{ matrix.lambda }}
          short_sha: ${{ needs.deploy2gchr.outputs.short_sha }}
