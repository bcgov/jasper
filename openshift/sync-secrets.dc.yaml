# For the now, the SYNC_SECRETS template is deployed manually via oc process / oc appply command.
# Team is investigating the integration of ArgoCD as a long term solution.
#   e.g.
#       # Removes existing components to start from a clean slate
#       oc delete cronjob,pvc,rolebinding,sa,roles -n $NAMESPACE -l app=sync-secrets 
#
#       # Dry Run
#       oc process -f sync_secrets.yaml --param-file=.env
#
#       # Create and Apply
#       oc process -f sync_secrets.yaml --param-file=.env | oc apply -f -
#
#       # Manually create and trigger a job based from the cronjob template
#       oc create job -n $NAMESPACE "sync-secrets-manual-$(date +%s)" --from=cronjob/sync-secrets
#
# The code in "vault.hashicorp.com/agent-inject-template-values" iterates on each secret and 
# save it json format to make it easier for the shell script to manipulate the secrets. 
apiVersion: template.openshift.io/v1
kind: Template
labels:
  app: sync-secrets
  template: sync-secrets-template
metadata:
  name: sync-secrets

objects:
  - apiVersion: batch/v1
    kind: CronJob
    metadata:
      name: sync-secrets
    spec:
      concurrencyPolicy: Forbid
      failedJobsHistoryLimit: 3
      successfulJobsHistoryLimit: 3
      startingDeadlineSeconds: 60
      jobTemplate:
        metadata:
        spec:
          backoffLimit: 6
          activeDeadlineSeconds: 600
          parallelism: 1
          completions: 1
          template:
            metadata:
              labels:
                app: sync-secrets
                template: sync-secrets-template
                DataClass: Medium
                role: sync-secrets
              annotations:
                vault.hashicorp.com/agent-inject: "true"
                vault.hashicorp.com/agent-inject-token: "true"
                vault.hashicorp.com/auth-path: auth/k8s-emerald
                vault.hashicorp.com/namespace: platform-services
                vault.hashicorp.com/role: ${LICENSE_PLATE}-${VAULT_ROLE}
                vault.hashicorp.com/agent-inject-secret-values: jasper-secret-${VAULT_SECRET_ENV}
                vault.hashicorp.com/agent-inject-template-values: |
                  {{- with secret "${LICENSE_PLATE}-${VAULT_ROLE}/jasper-secret-${VAULT_SECRET_ENV}" -}}
                  {
                  {{ $length := (len .Data.data) }}
                  {{ $index := 0 }}
                  {{ range $k, $v := .Data.data }}
                    "{{ $k }}": {
                    {{ $innerLength := (len $v) }}
                    {{ $innerIndex := 0 }}
                    {{ range $vk, $vv := $v }}
                      "{{$vk}}": "{{$vv}}"{{ if ne (add $innerIndex 1) $innerLength }},{{ end }}
                      {{ $innerIndex = (add $innerIndex 1) }}
                    {{ end }}
                    }{{ if ne (add $index 1) $length }},{{ end }}
                    {{ $index = (add $index 1) }}
                  {{ end }}
                  }
                  {{- end -}}
                vault.hashicorp.com/agent-pre-populate-only: "true"
            spec:
              serviceAccountName: ${LICENSE_PLATE}-vault
              containers:
                - name: sync-secrets
                  image: "${IMAGE_REGISTRY}/${IMAGE_NAMESPACE}/${IMAGE_NAME}:${IMAGE_TAG}"
                  imagePullPolicy: Always
                  env:
                    - name: VAULT_SECRET_ENV
                      value: "${VAULT_SECRET_ENV}"
                    - name: LOCAL_SECRET_PATH
                      value: "${LOCAL_SECRET_PATH}"
                    - name: AWS_ACCESS_KEY_ID
                      valueFrom:
                        secretKeyRef:
                          name: aws-secret
                          key: AWS_ACCESS_KEY_ID
                    - name: AWS_SECRET_ACCESS_KEY
                      valueFrom:
                        secretKeyRef:
                          name: aws-secret
                          key: AWS_SECRET_ACCESS_KEY
                    - name: AWS_REGION
                      valueFrom:
                        secretKeyRef:
                          name: aws-secret
                          key: AWS_REGION
                    - name: HTTP_PROXY
                      valueFrom:
                        secretKeyRef:
                          name: proxy-config
                          key: HTTP_PROXY
                    - name: HTTPS_PROXY
                      valueFrom:
                        secretKeyRef:
                          name: proxy-config
                          key: HTTPS_PROXY
                    - name: NO_PROXY
                      valueFrom:
                        secretKeyRef:
                          name: proxy-config
                          key: NO_PROXY
                  resources:
                    requests:
                      cpu: 50m
                    limits:
                      cpu: 250m
              restartPolicy: Never
      schedule: "${CRON_SCHEDULE}"
      suspend: false

parameters:
  - name: LICENSE_PLATE
    description: Jasper's License Plate
    required: true
    value: "e4161f"

  - name: VAULT_ROLE
    description: -nonprod or -prod
    required: true
    value: "nonprod"

  - name: VAULT_SECRET_ENV
    description: Vault's Environment (dev, test, prod)
    required: true
    value: "dev"

  - name: LOCAL_SECRET_PATH
    description: Path in the container
    required: true
    value: "/vault/secrets/values"

  - name: CRON_SCHEDULE
    description: Cronjob Schedule
    required: true
    value: "0 0 * * *" # Runs the job daily to ensure that AWS access key/id is up-to-date.

  - name: IMAGE_REGISTRY
    description: Image Registry
    required: true
    value: "ghcr.io"

  - name: IMAGE_NAMESPACE
    description: Image Namespace
    required: true
    value: "bcgov/jasper"

  - name: IMAGE_NAME
    description: Image Name
    required: true
    value: "sync-secrets"

  - name: IMAGE_TAG
    description: Image tag
    required: true
    value: "latest"